"""

__author__ = "ChrishSec"
__copyright__ = "Copyright (C) 2024 ChrishSec"
__license__ = "GNU General Public License v3.0"
__version__ = "1.0.0"

Website: https://ChrishSec.com
GitHub: https://github.com/ChrishSec
Twitter: https://twitter.com/ChrishSec

"""

import re
import sys
import json
import base64
import requests
import tkinter as tk
from tkinter import messagebox, PhotoImage
from bs4 import BeautifulSoup

def api(ip_address, output_text):
    try:
        url = "https://iplookup.chrishsec.com/"
        headers = {
            "Host": "iplookup.chrishsec.com",
            "User-Agent": "IPlookup/v1.0.0/GUI",
            "Authorization": "Bearer 3ca64848-8bce-41a3-9dbb-3fecf583b85e",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "Content-Type": "application/x-www-form-urlencoded",
            "Origin": "https://iplookup.chrishsec.com",
            "Referer": "https://iplookup.chrishsec.com/",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-origin",
            "Sec-Fetch-User": "?1",
            "Dnt": "1",
            "Sec-Gpc": "1",
            "Te": "trailers",
        }

        data = {
            "ipAddress": ip_address
        }

        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        script_tags = soup.find_all('script')

        json_data = None
        for script_tag in script_tags:
            script_text = script_tag.get_text()
            if 'var jsonData =' in script_text:
                json_data = re.search(r'var jsonData = (.+?);', script_text).group(1)
                decoded_info = json.loads(json_data)

                result_text = ""
                result_text += print_info(decoded_info, 'ipaddress', '\n IP Address')
                result_text += print_info(decoded_info, 'country', '\n Country')
                result_text += print_info(decoded_info, 'countrycode', '\n Country Code')
                result_text += print_info(decoded_info, 'city', '\n City')
                result_text += print_info(decoded_info, 'zip', '\n Zip')
                result_text += print_info(decoded_info, 'lat', '\n Lat')   
                result_text += print_info(decoded_info, 'lon', '\n Lon')
                result_text += print_info(decoded_info, 'timezone', '\n Timezone')
                result_text += print_info(decoded_info, 'isp', '\n ISP')
                result_text += print_info(decoded_info, 'org', '\n Org')
                result_text += print_info(decoded_info, 'asn', '\n ASN')

                output_text.config(fg="lime")
                output_text.delete("1.0", tk.END)
                output_text.insert(tk.END, result_text)

                num_lines = len(result_text.split('\n'))
                output_text.config(height=num_lines + 2)
                return
    except requests.exceptions.RequestException:
        return
    except json.JSONDecodeError:
        return
    except AttributeError:
        return
    except KeyboardInterrupt:
        print("\n Exiting.")
        sys.exit(0)
    except Exception as e:
        return

def print_info(data, key, label):
    value = data.get(key, 'N/A') if key in data and data[key] else 'N/A'
    return f"\n{label} :  {value}"

def on_submit(entry, output_text):
    ip_address = entry.get().strip()
    if ip_address:
        entry.config(fg="lime", bg="black")
        api(ip_address, output_text)
    else:
        messagebox.showerror("Error", "Please enter an IP address or domain.")

def main():

    image_data = ""

    window = tk.Tk()
    window.title("IP/Domain Lookup - ChrishSec.com")
    image = PhotoImage(data=base64.b64decode(image_data)) 
    window.iconphoto(True, image)
    window.configure(bg="black")

    label = tk.Label(window, text="\nEnter IP Address or Domain", font=("Helvetica", 12), bg="black", fg="lime")
    label.pack(pady=10) 

    entry = tk.Entry(window, font=("Helvetica", 12), width=30, bg="black", fg="lime", bd=2, highlightbackground="lime")
    entry.pack(pady=5)
    entry.insert(0, "example.com")

    submit_button = tk.Button(window, text="Submit", command=lambda: on_submit(entry, output_text), font=("Helvetica", 12), bg="black", fg="lime", bd=2, highlightbackground="lime")
    submit_button.pack(pady=10)

    output_text = tk.Text(window, font=("Helvetica", 12), wrap=tk.WORD, height=10, bg="black", fg="lime", bd=2, relief="solid", highlightbackground="lime")
    output_text.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)
    window.mainloop()

if __name__ == "__main__":
    main()